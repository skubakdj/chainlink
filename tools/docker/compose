#!/bin/bash
set -e

# Command line flags used for 'docker compose build'
DOCKER_COMPOSE_BUILD_OPTS=${DOCKER_COMPOSE_BUILD_OPTS-"--parallel"}

# Enable buildkit support locally
if [ -z $CI ]; then
export COMPOSE_DOCKER_CLI_BUILD=1
export DOCKER_BUILDKIT=1
fi

# Export docker tag to be used in docker-compose files
if [ -z $CHAINLINK_DOCKER_TAG ]; then
export CHAINLINK_DOCKER_TAG="latest"
else
export CHAINLINK_DOCKER_TAG=$CHAINLINK_DOCKER_TAG
fi

base_files="-f docker-compose.yaml -f docker-compose.postgres.yaml"
# Allow for choosing between geth or parity
if [ $GETH_MODE ]; then
  base_files="$base_files -f docker-compose.gethnet.yaml"
else
  base_files="$base_files -f docker-compose.paritynet.yaml"
fi

base="docker-compose $base_files" # base config, used standalone for acceptance
test="$base -f docker-compose.integration.yaml" # config to run integration tests
deps="$test -f docker-compose.deps.yaml" # config to bring up integration test dependencies

function save_test_logs {
  mkdir -p logs
  $test logs --no-color cypress-job-server > ./logs/cypress-job-server.log
  $test logs --no-color echo-server > ./logs/echo-server.log
}

usage="compose -- A helper script for running common docker-compose commands\


This script has been pared down specifically to run the integration tests. A full version can be found in Chainlink.

Commands:
    help                  Displays this help menu
    clean                 Remove any containers and volumes related to compose files
    logs                  Display the logs of any service(s) by name
    test                  Run integration test suite
    *                     Run docker-compose with base config"

case "$1" in
  help)
    echo "$usage"
    ;;
  clean)
    $base down -v
    $test down -v
    $deps down -v
    ;;
  logs)
    $base logs -f ${@:2}
    ;;
  test)
    $test build $DOCKER_COMPOSE_BUILD_OPTS
    $deps up --exit-code-from wait-db wait-db
    $test up --exit-code-from integration
    save_test_logs
    $test down -v
    ;;
  *)
    $base $@
    ;;
esac
